local Protocol = {};

-- 表示数值可以用16或10进制(最小值，最大值)
Protocol.Attr = 
{
	-- 协议的显示名称,不能超过16字符，目前暂不支持中文
	Name = "PELCOD",	
		
	-- 指明是云台协议还是矩阵协议，使用"PTZ", "MATRIX"表示
	Type = "PTZ",
	
	-- 以ms为单位
	Internal = 200,
				
	-- 没有对应的地址范围，请都设成0xff
	-- 云台地址范围
	CamAddrRange 		= {0x01, 0xFF}, 
	-- 监视地址范围
	MonAddrRange		= {0x00, 0xFF},	
	-- 预置点范围
	PresetRange 		= {0x00, 0xFF},
	-- 自动巡航线路范围
	TourRange		= {0x01, 0xff},
	-- 轨迹线路范围
	PatternRange		= {0x01, 0x05},
	-- 垂直速度范围
	TileSpeedRange 		= {0x01, 0x3F},
	-- 水平速度范围
	PanSpeedRange 		= {0x01, 0x3F},
	-- 自动扫描范围
	ScanRange 			= {0x01, 0xff},
	
	-- 辅助范围
	AuxRange 			= {0x01, 0x08},
}

Protocol.CommandAttr =
{
	-- 协议中需要更改的位置，用LUA下标表示，即下标从１开始,用10进制表示
	AddrPos 			= 2, 
	PresetPos 		= 6, 
	TileSpeedPos 	= 6,
	PanSpeedPos 	= 5,
	AuxPos 				= 6,
}

Protocol.Command = 
{
	-- 写具体协议时只能用16进制或字符表示,没有的话就注释掉
	Start= 
	{
		--写上下左右, 左上，左下，右上，右下
		TileUp 		= "0xff, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00,",
		TileDown 	= "0xff, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00,",
		PanLeft 	= "0xff, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,", 
		PanRight 	= "0xff, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00,",
		LeftUp 		= "0xff, 0x01, 0x00, 0x0c, 0x00, 0x00, 0x00,",
		LeftDown 	= "0xff, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00,",
		RightUp		= "0xff, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00,",
		RightDown 	= "0xff, 0x01, 0x00, 0x12, 0x00, 0x00, 0x00,",

		ZoomWide 	= "0xff, 0x01, 0x00, 0x40, 0x00, 0x00, 0xc9",
		ZoomTele 	= "0xff, 0x01, 0x00, 0x20, 0x00, 0x00, 0xa9",
		FocusNear	= "0xff, 0x01, 0x01, 0x00, 0x00, 0x00, 0x8a",
		FocusFar 	= "0xff, 0x01, 0x00, 0x80, 0x00, 0x00, 0x09",
		IrisSmall 	= "0xff, 0x01, 0x04, 0x00, 0x00, 0x00, 0x8d",
		IrisLarge 	= "0xff, 0x01, 0x02, 0x00, 0x00, 0x00, 0x8b",		
		-- 灯光
		LightOn		= "0xff, 0x01, 0x88, 0x00, 0x00, 0x00, 0x00",
		LightOff  	= "0xff, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00",
			
		-- 预置点操作（设置，清除，转置)
		SetPreset 	= "0xff, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00",
		ClearPreset	= "0xff, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00",
		GoToPreset 	= "0xff, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00",
		--精确定位
		PositionAbs = "0xff, 0x01, 0x00, 0x4b, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x4d, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x4f, 0x00, 0x00, 0x00",
		
		-- 绝对移动命令
		AbsoluteStart = "0xff, 0x01, 0x00, 0x4b, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x4d, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x4f, 0x00, 0x00, 0x00",
		AbsoluteStop = "0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01",
		
		--持续移动命令
		ContinueStart = "0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff",
		ContinueStop = "0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01",
		
		-- 水平旋转，
		AutoPanOn	= "0xFF, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00",
		AutoPanOff	= "0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00",			
			
		-- 自动扫描，在预先设置的边界中间转动
		SetLeftLimit 	= "0xff, 0x01, 0x00, 0x11, 0x00, 0x00, 0x00",
		SetRightLimit	= "0xff, 0x01, 0x00, 0x13, 0x00, 0x00, 0x00", 
		AutoScanOn 		= "0xff, 0x01, 0x00, 0x1B, 0x00, 0x00, 0x00",
		AutoScanOff		= "0xff, 0x01, 0x00, 0x1D, 0x00, 0x00, 0x00",
		
		-- 自动巡航, 分别调用76号和96号预置点.
		StartTour 	= "0xff, 0x01, 0x00, 0x07, 0x00, 0x4C, 0x00",
		StopTour	= "0xff, 0x01, 0x00, 0x07, 0x00, 0x60, 0x00",
		
		-- 轨迹巡航, 一般指模式(设置开始，设置结束，运行，停止，清除模式
		SetPatternStart = "0xff, 0x01, 0x00, 0x1f, 0x00, 0x00, 0x00",
		SetPatternStop 	= "0xff, 0x01, 0x00, 0x21, 0x00, 0x00, 0x00",
		StartPattern 	= "0xff, 0x01, 0x00, 0x23, 0x00, 0x00, 0x00",
		StopPattern     = "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",

		
		AuxOn 	= "0xff, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00",
		AuxOff 	= "0xff, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00",
		Position = "0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,0x00, 0xff",	
			
	},
	Stop = 
	{
		TileUp 		= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		TileDown 	= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		PanLeft 	= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		PanRight 	= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		LeftUp 		= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		LeftDown 	= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		RightUp		= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		RightDown = "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		
		ZoomWide 	= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		ZoomTele 	= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		FocusNear = "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		FocusFar 	= "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		IrisSmall = "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
		IrisLarge = "0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
	},
}

Protocol.Checksum = function (s)
	if s[1] ~= 0x3a then
		s[7] = math.mod((s[2] + s[3] + s[4] + s[5] + s[6]), 256);
	end;
	return s;
end;

Protocol.CamAddrProcess = function(s, addr)
	local addr = math.mod(addr,256);
	if s[1] ~= 0x3a then
		s[Protocol.CommandAttr.AddrPos] = addr;
	else
		s[2] = addr;
	end;
	return s;
end;

Protocol.SpeedProcess = function(s, ver, hor)
	if s[4] ~= 0x00 then
		s[6] = ver;
		s[5] = hor;
	end;
	return s;
end;

Protocol.PatternProcess = function(s, num)
	s[6] = num;
	return s;	
end;

--[[
云台精确定位
arg1:水平坐标
arg2：垂直坐标
arg3：ZOOM坐标
--]]
Protocol.PositionAbsProcess = function(s,arg1, arg2, arg3, T)
	--下面只处理云台精确定位功能
	arg1 = arg1*10;
	--垂直坐标系转换
	if arg2 < 0 then
		arg2 = arg2 + 3600;
	end
	arg2 = arg2 * 10;
	arg3 = (arg3/128)*65535;
	--PositionAbs = "0xff, 0x01, 0x00, 0x4b, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x4d, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x4f, 0x00, 0x00, 0x00";
	if s[1] == 0xFF then
		s[5] = bits.band(arg1,0xff00)/256;
		s[6] = bits.band(arg1,0xff);
		s[7] = math.mod((s[2] + s[3] + s[4] + s[5] + s[6]), 256);
		s[12] = bits.band(arg2,0xff00)/256;
		s[13] = bits.band(arg2,0xff);
		s[14] = math.mod((s[9] + s[10] + s[11] + s[12] + s[13]), 256);
		s[19] = bits.band(arg3,0xff00)/256;
		s[20] = bits.band(arg3,0xff);
		s[21] = math.mod((s[16] + s[17] + s[18] + s[19] + s[20]), 256);
		
		return s;
	end;
end;

--[[
云台绝对定位
arg1:水平坐标
arg2：垂直坐标
arg3：ZOOM坐标
--]]
Protocol.AbsoluteStartProcess = function(s,arg1, arg2, arg3, T)
	local xValue = bits.rshift(arg1, 16);
	--Onvif垂直坐标有负数
	local yValue = arg2/(256*256);
	local zValue = arg3/(256*256);

	xValue = xValue*10;
	--垂直坐标系转换
	if yValue < 0 then
		yValue = yValue + 3600;
	end;
	yValue = yValue*10;
	zValue = (zValue/128)*65535;
	--下面只处理绝对移动功能
	--AbsoluteStart = "0xff, 0x01, 0x00, 0x4b, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x4d, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x4f, 0x00, 0x00, 0x00";
	if s[1] == 0xFF then
		--水平位置
		s[5] = bits.rshift(bits.band(xValue,0xff00), 8);
		s[6] = bits.band(xValue,0xff);
		s[7] = math.mod((s[2] + s[3] + s[4] + s[5] + s[6]), 256);
		--垂直位置
		s[12] = bits.rshift(bits.band(yValue,0xff00), 8);
		s[13] = bits.band(yValue,0xff);
		s[14] = math.mod((s[9] + s[10] + s[11] + s[12] + s[13]), 256);
		--变倍值
		s[19] = bits.rshift(bits.band(zValue,0xff00), 8);
		s[20] = bits.band(zValue,0xff);
		s[21] = math.mod((s[16] + s[17] + s[18] + s[19] + s[20]), 256);
		
		return s;
	end;
end;

--[[
云台持续移动
arg1:水平速度
arg2：垂直速度
arg3：ZOOM速度
T：超时时间
--]]
Protocol.ContinueStartProcess = function(s, arg1, arg2, arg3, T)
	--下面只处理持续移动功能		
	if s[1] == 0xff then
		--处理水平控制
		if arg1 > 0 then
			s[4] = 0x02;
		elseif arg1 < 0 then
			s[4] = 0x04;
		else
			s[4] = 0x00;
		end
		--处理垂直控制
		if arg2 > 0 then
			s[4] = bits.bor(s[4], 0x08);
		elseif arg2 < 0 then
			s[4] = bits.bor(s[4], 0x10);
		end
		--处理变倍控制
		if arg3 > 0 then
			s[4] = bits.bor(s[4], 0x20);
		elseif arg3 < 0 then
			s[4] = bits.bor(s[4], 0x40);
		end
		--处理水平速度，范围(0,3f),Onvif范围(0, ff)
		s[5] = math.abs(arg1)/4;
		--处理垂直速度，范围(0,3f),Onvif范围(0, ff)
		s[6] = math.abs(arg2)/4;
		s[7] = math.mod((s[2] + s[3] + s[4] + s[5] + s[6]), 256);
		
		return s;
	end
end;

--持续移动停止
Protocol.StopProcess = function(s, arg1, arg2, arg3, T)
	if s[1] == 0xff then
		s[7] = math.mod((s[2] + s[3] + s[4] + s[5] + s[6]), 256);
		
		return s;
	end
end

Protocol.PositionProcess = function(s, hor, ver, zoom)
	-- 下面只处理快速定位功能
	local max_pos_zoom = 16;
	if s[1] == 0x3a then
		s[4] = bits.band(hor,0xff00)/256;
		s[5] = bits.band(hor, 0xff);
		s[6] = bits.band(ver,0xff00)/256;
		s[7] = bits.band(ver,0xff);
		if zoom == 0 then
			s[8] = 0;
		else 
			if math.abs(zoom) > max_pos_zoom then
				s[8] = max_pos_zoom; 
			else 
				s[8] = math.abs(zoom);
			end;
			s[8] = zoom > 0 and s[8] or 0x80 + s[8];
		end
		s[9] = math.mod((s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8]), 256);
		return s;
	end;	
end;

return Protocol;