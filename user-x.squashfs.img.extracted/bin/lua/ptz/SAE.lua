--[[
这是SAE的云台控制协议.
1 巡航线路有4条, 编号0~3, 但是可以添加(删除)预置点的巡航线路只有0号.
--]]
local Protocol = {};

-- 表示数值可以用16或10进制(最小值，最大值)
Protocol.Attr = 
{
	-- 协议的显示名称,不能超过16字符，目前暂不支持中文
	Name = "SAE",	
		
	-- 指明是云台协议还是矩阵协议，使用"PTZ", "MATRIX"表示
	Type = "PTZ",
	
	-- 以ms为单位
	Internal = 200,
				
	-- 没有对应的地址范围，请都设成0xff
	-- 云台地址范围
	CamAddrRange 		= {0x00, 0xFF}, 
	-- 监视地址范围
	MonAddrRange		= {0x00, 0xFF},	
	-- 预置点范围
	PresetRange 		= {0x00, 0xff},
	-- 自动巡航线路范围
	TourRange		= {0, 3},
	-- 轨迹线路范围
	PatternRange		= {0, 3},
	-- 垂直速度范围
	TileSpeedRange 		= {0x00, 0xFF},
	-- 水平速度范围
	PanSpeedRange 		= {0x00, 0xFF},
	-- 自动扫描范围
	ScanRange 			= {0x01, 0xff},
	-- 辅助范围
	AuxRange 		= {0x01, 0xFF},
}

Protocol.CommandAttr =
{
	-- 协议中需要更改的位置，用LUA下标表示，即下标从１开始,用10进制表示
	AddrPos 		= 2, 
	PresetPos 		= 4, 
	TileSpeedPos 		= 5,
	PanSpeedPos 		= 4,
	AuxPos 			= 4,
}

Protocol.Command = 
{
	-- 写具体协议时只能用16进制或字符表示,没有的话就注释掉
	Start= 
	{
		--写上下左右, 左上，左下，右上，右下
		--因为P/T动作有专门的速度控制指令, 所以每个动作需要2条指令完成.
		TileUp 		= "0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xC4, 0x03, 0x00",
		TileDown 	= "0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xC8, 0x03, 0x00",
		PanLeft 	= "0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xC2, 0x03, 0x00",
		PanRight 	= "0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xC1, 0x03, 0x00",
		LeftUp 		= "0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xC6, 0x03, 0x00",
		LeftDown 	= "0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xCA, 0x03, 0x00",
		RightUp		= "0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xC5, 0x03, 0x00",
		RightDown 	= "0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0xC9, 0x03, 0x00",

		--因为Z/F/I动作都没有速度控制指令, 所以只发送一条指令.
		ZoomWide 	= "0x02, 0x00, 0x01, 0xD0, 0x03, 0x00",
		ZoomTele 	= "0x02, 0x00, 0x01, 0xE0, 0x03, 0x00",
		FocusNear	= "0x02, 0x00, 0x01, 0x40, 0x03, 0x00",
		FocusFar 	= "0x02, 0x00, 0x01, 0x80, 0x03, 0x00",
		IrisSmall 	= "0x02, 0x00, 0x01, 0xC0, 0x02, 0x00",
		IrisLarge 	= "0x02, 0x00, 0x01, 0xC0, 0x01, 0x00",
			
		-- 预置点操作（设置，清除，转置)
		SetPreset 	= "0x02, 0x00, 0x05, 0x00, 0x00",
		GoToPreset 	= "0x02, 0x00, 0x02, 0x00, 0x00",
			
		-- 自动扫描，在预先设置的边界中间转动
		SetLeftLimit 	= "0x02, 0x00, 0x0F, 0x02, 0x02, 0x00",
		SetRightLimit	= "0x02, 0x00, 0x0F, 0x02, 0x01, 0x00",
		AutoScanOn 	= "0x02, 0x00, 0x0F, 0x03, 0x00, 0x00",
                AutoScanOff     = "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
			
		-- 自动巡航，一般指在预置点之间巡航
		AddTour 	= "0x02, 0x00, 0x06, 0x00, 0x00",
		DeleteTour 	= "0x02, 0x00, 0x07, 0x00, 0x00",
		StartTour 	= "0x02, 0x00, 0x03, 0x00, 0x00",
		ClearTour	= "0x02, 0x00, 0x08, 0x00, 0x00",
                StopTour        = "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",

		-- 轨迹巡航, 一般指模式(设置开始，设置结束，运行，停止，清除模式
		SetPatternStart = "0x02, 0x00, 0x1B, 0x00, 0x01, 0x00",
		SetPatternStop 	= "0x02, 0x00, 0x1B, 0x00, 0x00, 0x00",
		StartPattern 	= "0x02, 0x00, 0x1C, 0x00, 0x00, 0x00",
                StopPattern     = "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",

		AuxOn 		= "0x02, 0x00, 0x0D, 0x00, 0x01, 0x00",
		AuxOff 		= "0x02, 0x00, 0x0D, 0x00, 0x00, 0x00",
		
		-- Position 	= "0x02, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00",
	},
	Stop = 
	{
		TileUp 		= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		TileDown 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		PanLeft 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		PanRight 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		LeftUp 		= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		LeftDown 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		RightUp		= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		RightDown 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		
		ZoomWide 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		ZoomTele 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		FocusNear 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		FocusFar 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		IrisSmall 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
		IrisLarge 	= "0x02, 0x00, 0x01, 0x00, 0x00, 0x00",
	},
}

Protocol.Checksum = function (s)
	local length = table.getn(s);
	if length < 6 then
		s[5] = math.mod(s[1] + s[2] + s[3] + s[4], 256);
	elseif length == 6 then
		s[6] = math.mod(s[1] + s[2] + s[3] + s[4] + s[5], 256);
	elseif length > 6 and length ~= 10 then
		s[6] = math.mod(s[1] + s[2] + s[3] + s[4] + s[5], 256);
		s[12] = math.mod(s[7] + s[8] + s[9] + s[10] + s[11], 256);
	end;
	return s;
end;

Protocol.CamAddrProcess = function(s, addr)
	s[Protocol.CommandAttr.AddrPos] = addr;
	if table.getn(s) > 6 and table.getn(s) ~= 10 then
		s[Protocol.CommandAttr.AddrPos + 6] = addr;
	end;
	return s;
end;

Protocol.SpeedProcess = function(s, ver, hor)
	if ver ~= 0 and s[3] == 0x0E then
		s[Protocol.CommandAttr.TileSpeedPos] = ver;
	end;
	if hor ~= 0 and s[3] == 0x0E then
		s[Protocol.CommandAttr.PanSpeedPos] = hor;
	end;
	return s;
end;

Protocol.SetTourProcess = function(opttable, tour, preset)
	opttable[4] = preset;
	return opttable;
end;

Protocol.TourProcess = function(opttable, tour)
	opttable[4] = tour;
	return opttable;
end;

Protocol.PatternProcess = function(opttable, num)
	opttable[4] = num;
	return opttable;
end;

--[[
Protocol.PositionProcess = function(s, hor, ver, zoom)
	local length = table.getn(s);
	local multiple = math.abs(zoom);
	
	if length == 10 then
		local max_pos_zoom = 23;
		
		local position_x = (hor / 8192) * 127;
		local position_y = ((0 - ver) / 8192) * 127;
		s[4] = position_x;
		s[5] = position_y;
		
		if multiple > max_pos_zoom then
			s[6] = 11;
			s[7] = 11;
		elseif multiple == 0 then
			s[6] = 254;
			s[7] = 254;
		else
			s[6] = math.sqrt((254 * 254) / multiple);
			s[7] = math.sqrt((254 * 254) / multiple);
		end;
		
		s[10] = math.mod((s[1] + s[2] + s[3] + s[4] + s[5] + s[6] + s[7] + s[8] + s[9]), 256);
	end;	
	return s;
end;
--]]

return Protocol;